name: Release

on:
  push:
    tags:
      - 'v*'  # 触发条件：推送以 v 开头的标签，如 v0.0.11
  workflow_dispatch:  # 允许手动触发
    inputs:
      version:
        description: 'Version to release (e.g., 0.0.11)'
        required: true
        type: string

permissions:
  contents: write  # 需要写权限来创建 release
  id-token: write  # 需要用于 PyPI 可信发布 (trusted publishing)

jobs:
  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run tests
      run: |
        pytest massgen/tests/ -v --tb=short
    
    - name: Check code quality (Unix)
      if: runner.os != 'Windows'
      run: |
        black --check massgen/
        isort --check-only massgen/
        flake8 massgen/ --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Check code quality (Windows)
      if: runner.os == 'Windows'
      run: |
        black --check massgen/
        isort --check-only massgen/
        flake8 massgen/ --count --select=E9,F63,F7,F82 --show-source --statistics

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Update version if manual trigger
      if: github.event_name == 'workflow_dispatch'
      run: |
        VERSION="${{ github.event.inputs.version }}"
        sed -i "s/__version__ = \".*\"/__version__ = \"$VERSION\"/" massgen/__init__.py
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add massgen/__init__.py
        git commit -m "Bump version to $VERSION"
        git tag -a "v$VERSION" -m "Release version $VERSION"
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: distribution
        path: dist/

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        fi
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: distribution
        path: dist/
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        name: MassGen v${{ steps.get_version.outputs.version }}
        generate_release_notes: true  # GitHub 自动生成 release notes
        body: |
          ## Installation
          
          ```bash
          pip install massgen==${{ steps.get_version.outputs.version }}
          ```
          
          ## Documentation
          
          - [README](https://github.com/Leezekun/MassGen/blob/main/README.md)
          - [Contributing Guide](https://github.com/Leezekun/MassGen/blob/main/CONTRIBUTING.md)
          - [Roadmap](https://github.com/Leezekun/MassGen/blob/main/ROADMAP_v0.0.12.md)
          
          ---
          
          <!-- Release notes generated by GitHub below -->
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.version, 'rc') || contains(steps.get_version.outputs.version, 'beta') || contains(steps.get_version.outputs.version, 'alpha') }}
        files: |
          dist/*.whl
          dist/*.tar.gz

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: create-release
    environment:
      name: pypi
      url: https://pypi.org/p/massgen
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: distribution
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        # 如果配置了 PyPI 的可信发布，则不需要密码
        # 否则需要在 repository secrets 中设置 PYPI_API_TOKEN
        # password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true
        verbose: true

  publish-test-pypi:
    name: Publish to Test PyPI (Optional)
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch'  # 仅在手动触发时发布到测试 PyPI
    environment:
      name: test-pypi
      url: https://test.pypi.org/p/massgen
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: distribution
        path: dist/
    
    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        # password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        skip-existing: true
        verbose: true

  notification:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: [create-release, publish-pypi]
    if: always()
    
    steps:
    - name: Send success notification
      if: success()
      run: |
        echo "✅ MassGen v${{ needs.create-release.outputs.version }} has been successfully released!"
        echo "📦 PyPI: https://pypi.org/project/massgen/${{ needs.create-release.outputs.version }}/"
        echo "🏷️ GitHub Release: https://github.com/Leezekun/MassGen/releases/tag/v${{ needs.create-release.outputs.version }}"
    
    - name: Send failure notification
      if: failure()
      run: |
        echo "❌ Release failed for MassGen v${{ needs.create-release.outputs.version }}"
        echo "Please check the workflow logs for details."